# Generated by Django 3.2.6 on 2021-08-09 01:47

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('number_id', models.CharField(max_length=10)),
                ('is_operador', models.BooleanField(default=False, verbose_name='Es un operador')),
                ('is_motorizado', models.BooleanField(default=False, verbose_name='Es un motorizado')),
                ('birth_date', models.DateField(null=True)),
                ('gender', models.CharField(max_length=4, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Local',
            fields=[
                ('ruc', models.CharField(max_length=15, primary_key=True, serialize=False, verbose_name='Local RUC')),
                ('name', models.CharField(max_length=20, verbose_name='Local name')),
                ('email', models.EmailField(max_length=254, verbose_name='Local email')),
                ('logo_img', models.ImageField(blank=True, null=True, upload_to='images/Locals/logos', verbose_name='Logo image')),
                ('reg_date', models.DateField(auto_now_add=True)),
                ('admin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('reference', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Map',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('map_name', models.CharField(max_length=15, verbose_name='Name of the table map.')),
            ],
        ),
        migrations.CreateModel(
            name='Pedido',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Motorizado',
            fields=[
                ('user_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='backApp.user')),
                ('isOnline', models.BooleanField(default=False, verbose_name='')),
                ('home_loc', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='backApp.location')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            bases=('backApp.user',),
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Sector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sector_name', models.CharField(max_length=15, verbose_name='Name of the sector')),
                ('limits', models.TextField(verbose_name='Coordinates defining the limits of this sector')),
                ('map_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backApp.map')),
            ],
        ),
        migrations.CreateModel(
            name='LocalSector',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.FloatField(verbose_name='Price set by the Local for the Sector')),
                ('local', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backApp.local')),
                ('sector', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backApp.sector')),
            ],
        ),
        migrations.CreateModel(
            name='LocalKM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('km_max', models.FloatField(verbose_name='Maximum Kilometer of delivery')),
                ('price_km', models.FloatField(verbose_name='Price per km')),
                ('km_min', models.FloatField(verbose_name='Maximum Kilometer of delivery')),
                ('price_min', models.FloatField(verbose_name='Min price to charge')),
                ('local', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backApp.local')),
            ],
        ),
        migrations.AddField(
            model_name='local',
            name='location_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='backApp.location'),
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('veh_model', models.CharField(max_length=30, verbose_name='Model of Vehicle')),
                ('year', models.IntegerField(verbose_name='Year of bought')),
                ('color', models.CharField(max_length=15, verbose_name='Color of car')),
                ('plate_number', models.CharField(max_length=10, verbose_name='Number of the car plate')),
                ('motorizado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='backApp.motorizado')),
            ],
        ),
    ]
